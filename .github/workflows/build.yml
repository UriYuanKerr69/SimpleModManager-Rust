name: Build and Create Artifacts

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_artifacts:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-pc-windows-msvc]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust and Cargo
      # You may pin to the exact commit or the version.
      # uses: moonrepo/setup-rust@e013866c4215f77c925f42f60257dec7dd18836e
        uses: moonrepo/setup-rust@v1.2.1
        with:
        # Comma-separated list of global binaries to install into Cargo.
        bins: # optional
        # Toggle caching of ~/.cargo/registry and /target/<cache-target> directories.
        cache: # optional, default is true
        # Base branch/ref to save a warmup cache on. Other branches/refs will restore from this base.
        cache-base: # optional
        # Name of the target profile to cache.
        cache-target: # optional, default is debug
        # Toolchain specification/channel to explicitly install.
        channel: # optional
        # Comma-separated list of additional components to install.
        components: # optional
        # Inherit all toolchain settings from the rust-toolchain.toml file.
        inherit-toolchain: # optional, default is false
        # Comma-separated list of additional targets to install.
        targets: # optional
        # Comma-separated list of target folder paths, relative from the repository root.
        target-dirs: # optional, default is target
        # Profile to install. Defaults to "minimal".
        profile: # optional
          
      - name: Build for ${{ matrix.os }}, ${{ matrix.target }}
        run: cargo build --release --target ${{ matrix.target }}
        shell: bash

      - name: Create Artifact
        if: ${{ success() && matrix.os == runner.os && matrix.target == runner.arch }}
        run: echo "Creating artifact for ${{ matrix.target }}"
        shell: bash

      - name: Upload Artifact
        if: ${{ success() && matrix.os == runner.os && matrix.target == runner.arch }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-binaries
          path: target/release/SimpleModManager-Rust
