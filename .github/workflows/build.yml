name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always  # Enable colored output in cargo

jobs:
  build:
    strategy:
      fail-fast: false  # Do not stop if one job fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target:
          - { triple: x86_64-unknown-linux-gnu, os: ubuntu-latest }
          - { triple: x86_64-pc-windows-gnu, os: windows-latest }
          - { triple: x86_64-apple-darwin, os: macos-latest }
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write  # This gives permission to create releases

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: 1.67.0  # Updated to 1.67.0
        override: true
        target: ${{ matrix.target.triple }}

    - name: Set Environment Variables (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "PATH=$PATH;C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.34.31933\bin\Hostx64\x64" >> $GITHUB_ENV
        echo "VCToolsVersion=14.34" >> $GITHUB_ENV
      shell: bash

    - name: Build
      id: build_step
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          echo "Running Windows build..."
          bash -c "cargo build --release --target ${{ matrix.target.triple }} -vv 2>&1 | tee build_log.txt"
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "build_success=true" >> $GITHUB_OUTPUT
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
            cat build_log.txt
          fi
        else
          if cargo build --release --target ${{ matrix.target.triple }} -vv; then
            echo "build_success=true" >> $GITHUB_OUTPUT
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
          fi
        fi
      shell: bash

    - name: Upload Artifact
      if: steps.build_step.outputs.build_success == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.target.triple }}-binaries
        path: target/${{ matrix.target.triple }}/release/

    - name: Create Pre-Release
      if: steps.build_step.outputs.build_success == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.sha }}-${{ matrix.os }}-${{ github.run_number }}
        release_name: Pre-Release ${{ github.sha }} on ${{ matrix.os }}
        body: |
          Pre-release build for ${{ matrix.target.triple }} on ${{ matrix.os }}
        draft: false
        prerelease: true

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
    - name: Check if all builds succeeded
      id: check_builds
      run: |
        ubuntu_success=${{ needs.build.outputs.build_step_ubuntu-latest.build_success }}
        windows_success=${{ needs.build.outputs.build_step_windows-latest.build_success }}
        macos_success=${{ needs.build.outputs.build_step_macos-latest.build_success }}
        
        if [ "$ubuntu_success" = "true" ] && [ "$windows_success" = "true" ] && [ "$macos_success" = "true" ]; then
          echo "all_builds_succeeded=true" >> $GITHUB_OUTPUT
        else
          echo "all_builds_succeeded=false" >> $GITHUB_OUTPUT
        fi

    - name: Download Artifacts
      if: steps.check_builds.outputs.all_builds_succeeded == 'true'
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Release
      if: steps.check_builds.outputs.all_builds_succeeded == 'true' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
