name: Build and Release
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always  # Enable colored output in cargo
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Do not stop if one job fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target:
          - { triple: x86_64-unknown-linux-gnu, extension: "" }
          - { triple: x86_64-pc-windows-gnu, extension: ".exe" }
          - { triple: x86_64-apple-darwin, extension: "" }
permissions:
  contents: write  # This gives permission to create releases

steps:
- name: Checkout repository
  uses: actions/checkout@v3

- name: Install Rust
  uses: actions-rs/toolchain@v1
  with:
    profile: minimal
    toolchain: stable  # Always use the latest stable version
    override: true
    target: ${{ matrix.target.triple }}

- name: Install System Dependencies
  if: runner.os == 'Linux' || runner.os == 'macOS'
  run: |
    if [ "${{ runner.os }}" == "Linux" ]; then
      sudo apt-get update
      sudo apt-get install -y libatk1.0-dev pkg-config;
    elif [ "${{ runner.os }}" == "macOS" ]; then
      brew update
      brew install atk pkg-config;
    fi
  shell: bash

- name: Build
  id: build_step
  run: |
    cargo build --release --target ${{ matrix.target.triple }} -vv
    echo "build_success=$?" >> $GITHUB_OUTPUT
  shell: bash

- name: Prepare Executable for Release
  if: steps.build_step.outputs.build_success == 'true'
  run: |
    mkdir -p release
    cp target/${{ matrix.target.triple }}/release/SimpleModManager-Rust${{ matrix.target.extension }} release/ || echo "Failed to copy executable"
  shell: bash

- name: Upload Artifact
  if: steps.build_step.outputs.build_success == 'true'
  uses: actions/upload-artifact@v3
  with:
    name: ${{ matrix.target.triple }}-binaries
    path: release/

- name: Generate Unique Tag
  if: steps.build_step.outputs.build_success == 'true'
  id: generate_tag
  run: |
    echo "unique_tag=${{ github.sha }}-${{ runner.os }}-$(date +%s)" >> $GITHUB_OUTPUT
  shell: bash

- name: Create Pre-Release
  if: steps.build_step.outputs.build_success == 'true'
  uses: actions/create-release@v1
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  with:
    tag_name: ${{ steps.generate_tag.outputs.unique_tag }}
    release_name: Pre-Release ${{ github.sha }} on ${{ runner.os }}
    body: |
      Pre-release build for ${{ matrix.target.triple }} on ${{ runner.os }}
    draft: false
    prerelease: true

- name: Upload Release Asset
  if: steps.build_step.outputs.build_success == 'true'
  uses: actions/upload-release-asset@v1
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  with:
    upload_url: ${{ steps.create_pre_release.outputs.upload_url }}
    asset_path: release/SimpleModManager-Rust${{ matrix.target.extension }}
    asset_name: SimpleModManager-Rust-${{ matrix.target.triple }}${{ matrix.target.extension }}
    asset_content_type: application/octet-stream

